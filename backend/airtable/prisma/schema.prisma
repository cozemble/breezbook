generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model add_on {
  id              String   @id
  tenant_id       String
  environment_id  String
  name            String
  description     String?
  price           Decimal  @db.Decimal
  price_currency  String
  expect_quantity Boolean
  section         String?
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)
  tenants         tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model blocked_time {
  id              String     @id
  tenant_id       String
  environment_id  String
  location_id     String?
  date            String
  start_time_24hr String
  end_time_24hr   String
  created_at      DateTime   @default(now()) @db.Timestamptz(6)
  updated_at      DateTime   @default(now()) @db.Timestamptz(6)
  locations       locations? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants         tenants    @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model booking_events {
  id             String             @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  tenant_id      String
  environment_id String
  booking_id     String
  event_type     booking_event_type
  event_data     Json
  created_at     DateTime           @default(now()) @db.Timestamptz(6)
  bookings       bookings           @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants        tenants            @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model booking_service_form_values {
  tenant_id           String
  environment_id      String
  booking_id          String
  service_form_id     String
  service_form_values Json
  bookings            bookings @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  forms               forms    @relation(fields: [service_form_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants             tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tenant_id, environment_id, booking_id, service_form_id])
}

model bookings {
  id                          String                        @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  tenant_id                   String
  environment_id              String
  status                      booking_status                @default(confirmed)
  customer_id                 String
  service_id                  String
  location_id                 String
  add_on_ids                  String[]
  order_id                    String
  date                        String
  start_time_24hr             String
  end_time_24hr               String
  time_slot_id                String?
  created_at                  DateTime                      @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime                      @default(now()) @db.Timestamptz(6)
  booking_events              booking_events[]
  booking_service_form_values booking_service_form_values[]
  customers                   customers                     @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  locations                   locations                     @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  orders                      orders                        @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  services                    services                      @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants                     tenants                       @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
  time_slots                  time_slots?                   @relation(fields: [time_slot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  cancellation_grants         cancellation_grants[]
  reservations                reservations[]
}

model business_hours {
  id              String     @id
  tenant_id       String
  environment_id  String
  location_id     String?
  day_of_week     String     @db.VarChar(10)
  start_time_24hr String     @db.VarChar(10)
  end_time_24hr   String     @db.VarChar(10)
  created_at      DateTime   @default(now()) @db.Timestamptz(6)
  updated_at      DateTime   @default(now()) @db.Timestamptz(6)
  locations       locations? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants         tenants    @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model cancellation_grants {
  id             String   @id
  environment_id String
  tenant_id      String
  booking_id     String
  definition     Json
  committed      Boolean  @default(false)
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)
  bookings       bookings @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants        tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model coupons {
  id             String   @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  tenant_id      String
  environment_id String
  code           String
  definition     Json
  start_date     String
  end_date       String?
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)
  tenants        tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model customer_form_values {
  tenant_id      String
  environment_id String
  customer_id    String
  form_values    Json
  customers      customers @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants        tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tenant_id, environment_id, customer_id])
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model customers {
  id                   String                 @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  tenant_id            String
  environment_id       String
  first_name           String
  last_name            String
  email                String
  created_at           DateTime               @default(now()) @db.Timestamptz(6)
  updated_at           DateTime               @default(now()) @db.Timestamptz(6)
  bookings             bookings[]
  customer_form_values customer_form_values[]
  tenants              tenants                @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
  orders               orders[]

  @@unique([tenant_id, environment_id, email], map: "customers_tenant_id_email_key")
  @@unique([tenant_id, environment_id, email])
}

model data_synchronisation_id_mappings {
  id               String   @id
  tenant_id        String
  environment_id   String
  from_system      String
  from_entity_type String
  from_entity_id   String
  to_system        String
  to_entity_type   String
  to_entity_id     String
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  tenants          tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tenant_id, environment_id, from_system, from_entity_type, from_entity_id, to_system, to_entity_type], map: "data_synchronisation_id_mappi_tenant_id_environment_id_from_key")
}

model forms {
  id                          String                        @id
  tenant_id                   String
  environment_id              String
  name                        String
  description                 String?
  definition                  Json
  created_at                  DateTime                      @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime                      @default(now()) @db.Timestamptz(6)
  booking_service_form_values booking_service_form_values[]
  tenants                     tenants                       @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
  service_forms               service_forms[]
  tenant_settings             tenant_settings[]
}

model last_change_announcements {
  id                Int      @id @default(autoincrement())
  environment_id    String
  announcement_date DateTime @db.Timestamp(6)
  channel_id        String
}

model last_shovl_out {
  environment_id String
  entity_type    String
  last_shovl_out DateTime @db.Timestamp(6)

  @@id([environment_id, entity_type])
}

model locations {
  id                    String                  @id
  tenant_id             String
  environment_id        String
  slug                  String
  name                  String
  created_at            DateTime                @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                @default(now()) @db.Timestamptz(6)
  blocked_time          blocked_time[]
  bookings              bookings[]
  business_hours        business_hours[]
  tenants               tenants                 @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
  order_lines           order_lines[]
  pricing_rules         pricing_rules[]
  refund_rules          refund_rules[]
  resource_availability resource_availability[]
  service_locations     service_locations[]
  time_slots            time_slots[]

  @@unique([tenant_id, environment_id, slug], map: "locations_tenant_environment_slug_idx")
  @@unique([tenant_id, environment_id, slug])
}

model log_messages {
  id             String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  environment_id String
  message        String
  level          String   @default("info")
  correlation_id String?
  created_at     DateTime @default(now()) @db.Timestamptz(6)
}

model mutation_events {
  id                         Int                          @id @default(autoincrement())
  tenant_id                  String
  environment_id             String
  event_type                 String                       @db.VarChar(255)
  entity_type                String                       @db.VarChar(255)
  entity_id                  String
  event_time                 DateTime                     @default(now()) @db.Timestamp(6)
  event_data                 Json
  tenants                    tenants                      @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
  replicated_mutation_events replicated_mutation_events[]
}

model oauth_tokens {
  id             String   @id
  tenant_id      String
  environment_id String
  owning_system  String
  token_type     String
  token          String
  expires_at     DateTime @db.Timestamp(6)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  tenants        tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tenant_id, environment_id, owning_system, token_type])
}

model order_lines {
  id                String      @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  tenant_id         String
  environment_id    String
  order_id          String
  service_id        String
  location_id       String
  add_on_ids        String[]    @default([])
  date              String
  time_slot_id      String?
  start_time_24hr   String      @db.VarChar(10)
  end_time_24hr     String      @db.VarChar(10)
  service_form_data Json?
  created_at        DateTime    @default(now()) @db.Timestamptz(6)
  updated_at        DateTime    @default(now()) @db.Timestamptz(6)
  locations         locations   @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  services          services    @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants           tenants     @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
  time_slots        time_slots? @relation(fields: [time_slot_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model order_payments {
  id                      String         @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  tenant_id               String
  environment_id          String
  order_id                String
  status                  payment_status
  amount_in_minor_units   Int
  amount_currency         String
  provider                String
  provider_transaction_id String
  created_at              DateTime       @default(now()) @db.Timestamptz(6)
  updated_at              DateTime       @default(now()) @db.Timestamptz(6)
  orders                  orders         @relation(fields: [order_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants                 tenants        @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model orders {
  id                         String           @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  tenant_id                  String
  environment_id             String
  customer_id                String
  customer_form_data         Json?
  total_price_in_minor_units Int
  total_price_currency       String
  created_at                 DateTime         @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime         @default(now()) @db.Timestamptz(6)
  bookings                   bookings[]
  order_payments             order_payments[]
  customers                  customers        @relation(fields: [customer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants                    tenants          @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model pricing_rules {
  id             String     @id
  environment_id String
  tenant_id      String
  location_id    String?
  definition     Json
  rank           Int
  active         Boolean
  created_at     DateTime   @default(now()) @db.Timestamptz(6)
  updated_at     DateTime   @default(now()) @db.Timestamptz(6)
  locations      locations? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants        tenants    @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model received_webhooks {
  id             String   @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  tenant_id      String
  environment_id String
  webhook_id     String
  payload        Json
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)
  tenants        tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model refund_rules {
  id             String     @id
  environment_id String
  tenant_id      String
  location_id    String?
  definition     Json
  created_at     DateTime   @default(now()) @db.Timestamptz(6)
  updated_at     DateTime   @default(now()) @db.Timestamptz(6)
  locations      locations? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants        tenants    @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model replicated_mutation_events {
  mutation_event_id     Int
  to_system             String
  replication_timestamp DateTime        @default(now()) @db.Timestamp(6)
  mutation_events       mutation_events @relation(fields: [mutation_event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([mutation_event_id, to_system])
}

model reservations {
  id               String   @id @default(dbgenerated("extensions.uuid_generate_v4()"))
  booking_id       String
  reservation_time DateTime @db.Timestamp(6)
  expiry_time      DateTime @db.Timestamp(6)
  reservation_type String
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  bookings         bookings @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model resource_availability {
  id              String     @id
  tenant_id       String?
  environment_id  String
  resource_id     String
  location_id     String?
  day_of_week     String     @db.VarChar(10)
  start_time_24hr String     @db.VarChar(10)
  end_time_24hr   String     @db.VarChar(10)
  created_at      DateTime   @default(now()) @db.Timestamptz(6)
  updated_at      DateTime   @default(now()) @db.Timestamptz(6)
  locations       locations? @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  resources       resources  @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants         tenants?   @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model resource_blocked_time {
  id              String    @id
  tenant_id       String
  environment_id  String
  resource_id     String
  date            String
  start_time_24hr String
  end_time_24hr   String
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  resources       resources @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants         tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model resource_types {
  id             String      @id
  tenant_id      String
  environment_id String
  name           String
  created_at     DateTime    @default(now()) @db.Timestamptz(6)
  updated_at     DateTime    @default(now()) @db.Timestamptz(6)
  tenants        tenants     @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
  resources      resources[]
}

model resources {
  id                    String                  @id
  tenant_id             String
  environment_id        String
  resource_type         String
  name                  String
  created_at            DateTime                @default(now()) @db.Timestamptz(6)
  updated_at            DateTime                @default(now()) @db.Timestamptz(6)
  resource_availability resource_availability[]
  resource_blocked_time resource_blocked_time[]
  resource_types        resource_types          @relation(fields: [resource_type], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants               tenants                 @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model schemaversion {
  version BigInt    @id
  name    String?
  md5     String?
  run_at  DateTime? @db.Timestamptz(6)
}

model service_forms {
  tenant_id      String
  environment_id String
  service_id     String
  form_id        String
  rank           Int
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)
  forms          forms    @relation(fields: [form_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  services       services @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants        tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tenant_id, environment_id, service_id, form_id])
}

model service_images {
  service_id       String
  tenant_id        String
  environment_id   String
  public_image_url String
  mime_type        String
  context          String
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  services         services @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tenants          tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([service_id, tenant_id, environment_id, context])
}

model service_locations {
  tenant_id      String
  environment_id String
  service_id     String
  location_id    String
  created_at     DateTime  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime  @default(now()) @db.Timestamptz(6)
  locations      locations @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  services       services  @relation(fields: [service_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants        tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tenant_id, environment_id, service_id, location_id])
}

model services {
  id                      String              @id
  tenant_id               String
  environment_id          String
  slug                    String
  name                    String
  description             String
  duration_minutes        Int
  price                   Decimal             @db.Decimal
  price_currency          String
  permitted_add_on_ids    String[]
  resource_types_required String[]
  requires_time_slot      Boolean
  created_at              DateTime            @default(now()) @db.Timestamptz(6)
  updated_at              DateTime            @default(now()) @db.Timestamptz(6)
  bookings                bookings[]
  order_lines             order_lines[]
  service_forms           service_forms[]
  service_images          service_images[]
  service_locations       service_locations[]
  tenants                 tenants             @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tenant_id, environment_id, slug])
}

model system_config {
  environment_id String
  config_key     String
  config_value   String

  @@id([environment_id, config_key])
}

model system_outbound_webhooks {
  id             String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  environment_id String
  tenant_id      String
  action         String
  status         String   @default("pending")
  payload_type   String
  payload        Json
  batch_id       String?  @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamptz(6)
  updated_at     DateTime @default(now()) @db.Timestamptz(6)
  tenants        tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model tenant_branding {
  tenant_id      String
  environment_id String
  theme          Json?    @default("{}")
  headline       String
  description    String
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  tenants        tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([tenant_id, environment_id])
}

model tenant_images {
  tenant_id        String
  environment_id   String
  public_image_url String
  mime_type        String
  context          String
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  tenants          tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction)

  @@id([tenant_id, environment_id, context])
}

model tenant_settings {
  tenant_id        String
  environment_id   String
  customer_form_id String?
  iana_timezone    String
  created_at       DateTime @default(now()) @db.Timestamptz(6)
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  forms            forms?   @relation(fields: [customer_form_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants          tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([tenant_id, environment_id])
}

model tenants {
  tenant_id                        String                             @id
  name                             String
  slug                             String                             @unique
  created_at                       DateTime                           @default(now()) @db.Timestamptz(6)
  updated_at                       DateTime                           @default(now()) @db.Timestamptz(6)
  add_on                           add_on[]
  blocked_time                     blocked_time[]
  booking_events                   booking_events[]
  booking_service_form_values      booking_service_form_values[]
  bookings                         bookings[]
  business_hours                   business_hours[]
  cancellation_grants              cancellation_grants[]
  coupons                          coupons[]
  customer_form_values             customer_form_values[]
  customers                        customers[]
  data_synchronisation_id_mappings data_synchronisation_id_mappings[]
  forms                            forms[]
  locations                        locations[]
  mutation_events                  mutation_events[]
  oauth_tokens                     oauth_tokens[]
  order_lines                      order_lines[]
  order_payments                   order_payments[]
  orders                           orders[]
  pricing_rules                    pricing_rules[]
  received_webhooks                received_webhooks[]
  refund_rules                     refund_rules[]
  resource_availability            resource_availability[]
  resource_blocked_time            resource_blocked_time[]
  resource_types                   resource_types[]
  resources                        resources[]
  service_forms                    service_forms[]
  service_images                   service_images[]
  service_locations                service_locations[]
  services                         services[]
  system_outbound_webhooks         system_outbound_webhooks[]
  tenant_branding                  tenant_branding[]
  tenant_images                    tenant_images[]
  tenant_settings                  tenant_settings[]
  time_slots                       time_slots[]
  webhook_destinations             webhook_destinations[]
}

model time_slots {
  id              String        @id
  tenant_id       String
  environment_id  String
  location_id     String?
  description     String
  start_time_24hr String        @db.VarChar(10)
  end_time_24hr   String        @db.VarChar(10)
  tag             String?
  created_at      DateTime      @default(now()) @db.Timestamptz(6)
  updated_at      DateTime      @default(now()) @db.Timestamptz(6)
  bookings        bookings[]
  order_lines     order_lines[]
  locations       locations?    @relation(fields: [location_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants         tenants       @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model webhook_destinations {
  id                 String   @id @default(dbgenerated("extensions.uuid_generate_v4()")) @db.Uuid
  tenant_id          String
  environment_id     String
  payload_type       String
  method             String   @default("post")
  destination_system String
  destination_url    String
  headers            Json?
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  updated_at         DateTime @default(now()) @db.Timestamptz(6)
  tenants            tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: NoAction, onUpdate: NoAction)
}

model simple_kv_store {
  key        String    @id
  value      String
  created_at DateTime  @default(now()) @db.Timestamp(6)
  updated_at DateTime  @default(now()) @db.Timestamp(6)
  expires_at DateTime? @db.Timestamp(6)
}

model locks {
  lock_key    String    @id @db.VarChar(255)
  acquired_at DateTime? @default(now()) @db.Timestamp(6)
}

enum booking_event_type {
  cancelled
  amended
  completed
  no_show
}

enum booking_status {
  confirmed
  cancelled
}

enum payment_status {
  succeeded
  pending
  failed
}
